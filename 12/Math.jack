/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, index;

        let index = 0;
        while (index < 16) {
            if (Math.bit(y, index)) {
                let sum = sum + x;
            }
            let x = x + x;
            let index = index + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, result, sum;
        var boolean isPos;

        let isPos = ((x > 0) = (y > 0));
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        let q = Math.divide(x, y + y);
        let sum = q + q;

        if ((x - (sum * y)) < y) {
            let result = sum;
        } else {
            let result = sum + 1;
        }
        if (isPos) {
            return result;
        } else {
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp, tempTwo;
        let y = 0;
        let j = 7;

        while (~(j < 0)) {
            let temp = y + twoToThe[j];
            let tempTwo = temp * temp;

            if (~(tempTwo > x) & (tempTwo > 0)) {
                let y = temp;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    function int bit(int x, int j) {
        return ~((x & twoToThe[j]) = 0);
    }
}