// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    filed int len;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let len = maxLength;
        let this = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return this[k];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let this[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let len = len + 1;
        let this[len] = c;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let this[len] = 0;
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue(String s) {
        var int v, l, index, d, temp, isNeg;
        let v = 0;
        let l = s.length();
        let index = 0;

        if (s[index] = 45) {
            let index = index + 1;
            let isNeg = true;
        } else {
            let isNeg = false;
        }
        while (index < l) {
            let temp = s[index];
            if ((temp < 48) | (temp > 57)) {
                if (isNeg) {
                    return -v;
                } else {
                    return v;
                }
            }
            let d = s[index] - 48;
            let index = index + 1;
            let v = v * 10 + d;
        }

        if (isNeg) {
            return -v;
        } else {
            return v;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int n) {
        var int lastDigit;
        var char c;
        var String str;
        var boolean isNeg;
        if (n < 0) {
            let isNeg = true;
            let n = -n;
        } else {
            let isNeg = false;
        }

        let lastDigit = Math.mod(n, 10);
        let c = lastDigit + 48;
        if (n < 10) {
            if (isNeg) {
                let str = "-";
                let str = str.appendChar(c);
            } else {
                let str = c;
            }
            return str;
        } else {
            return int2String(n / 10).appendChar(c);
        }
    }

    /** Returns the new line character. */
    function char newLine() {
    }

    /** Returns the backspace character. */
    function char backSpace() {

    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    }
}
